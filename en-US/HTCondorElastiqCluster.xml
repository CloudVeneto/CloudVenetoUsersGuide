<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Users_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="HTCondorElastiqCluster">
<title>Creating Batch Clusters on the Cloud</title>

<para>
  The virtual machines provided by CloudVeneto can also be used to
  implement batch clusters where users can run their applications (normal jobs or docker containers).
</para>
<para>
In this chapter we explain how to implement a dynamic batch cluster based
on <ulink url="http://research.cs.wisc.edu/htcondor/manual/">HTCondor</ulink>.
</para>
  
 

  

<section id="TheIdea">
<title>Intro: the idea</title>
<para>                                                                         
  You create on the cloud a virtual machine that acts as a master for a dynamic
  batch system (implemented using HTCondor).
  When you create the master, using the instructions reported in
  <xref linkend="CreatingVMs"/>, you will need to specify some user-data to describe the cluster
  configuration, as described below.
</para>  


<para>
  The master node will be able to
  spawn (using the EC2 euca2ools) new slave nodes (where jobs are executed) when jobs are submitted to the 
  batch system. The elastic cluster will provide a number of virtual resources that scales up or down 
  depending on your needs. The total number of active virtual nodes is dynamic.
</para>


<para>
  You can log in on the master node and submit jobs to the batch system. These jobs will be run on the slave nodes, get done, and eventually the slaves will be released. 
</para>

<para>
The master node will act also as submitting machine: you can log in on this node and submit jobs to the 
batch system. These jobs will run on the slave nodes, get done, and eventually the slaves will be released.
</para>


<note>
<para>
  The master and the slaves must use the same image (which should have
  all the needed software). However the master can use a different flavor with
  respect to the slave nodes.
</para>
</note>

</section>





<section id="Prerequisites">
<title>Prerequisites</title>
<para>
<itemizedlist>
  <listitem><para>You should be registered in the Cloud as member of a project.</para></listitem>

<listitem><para>
  You need to have created a SSH key-pair, ad explained in
  <xref linkend="CreatingAKeypair"/>.
  This will allow you to log in the master and slave nodes.
</para></listitem>

<listitem><para>You need to download the EC2 credentials of the project you want to use (see <xref linkend="AccessingtheCloudthroughEC2"/>). You can download them from the dashboard as following:</para>
<para>Open the dashboard, select the project (drop down menu on top left of the dashboard), go 
to <menuchoice><guimenu>Compute</guimenu><guisubmenu>API Access</guisubmenu></menuchoice>
and here click on <menuchoice><guimenu>Download EC2 credentials</guimenu></menuchoice>.</para>
<para>You'll get a zip file with a name like: <replaceable>testing-x509.zip</replaceable>  (in this case 
<replaceable>testing</replaceable> is the name of the project).
The zip contains the following files:
<screen>
$ unzip testing-x509.zip
Archive:  testing-x509.zip
extracting: pk.pem
extracting: cert.pem
extracting: cacert.pem
extracting: ec2rc.sh
</screen>
Extract all these files somewhere safe. The content of your ec2rc.sh file is something like:
<screen>
$ cat ec2rc.sh

#!/bin/bash

NOVARC=$(readlink -f "${BASH_SOURCE:-${0}}" 2>/dev/null) || NOVARC=$(python -c 'import os,sys; print os.path.abspath(os.path.realpath(sys.argv[1]))' "${BASH_SOURCE:-${0}}")
NOVA_KEY_DIR=${NOVARC%/*}
export EC2_ACCESS_KEY=<literal>&lt;access_key&gt;</literal>
export EC2_SECRET_KEY=<literal>&lt;secret_key&gt;</literal>
export EC2_URL=https://cloud.cedc.csia.unipd.it:8773/services/Cloud
export EC2_USER_ID=42 # nova does not use user id, but bundling requires it
export EC2_PRIVATE_KEY=${NOVA_KEY_DIR}/pk.pem
export EC2_CERT=${NOVA_KEY_DIR}/cert.pem
export NOVA_CERT=${NOVA_KEY_DIR}/cacert.pem
export EUCALYPTUS_CERT=${NOVA_CERT} # euca-bundle-image seems to require this set

alias ec2-bundle-image="ec2-bundle-image --cert ${EC2_CERT} --privatekey ${EC2_PRIVATE_KEY} --user 42 --ec2cert ${NOVA_CERT}"
alias ec2-upload-bundle="ec2-upload-bundle -a ${EC2_ACCESS_KEY} -s ${EC2_SECRET_KEY} --url ${S3_URL} --ec2cert ${NOVA_CERT}"
</screen>
where EC2_ACCESS_KEY and EC2_SECRET_KEY are different for each project and user. The elastiq service uses these values to instantiate and to kill VMs in the specific project.
</para></listitem>

<listitem><para>
  You need to identify the image to be used for the master and for the
  slaves. Currently supported operating systems are RHEL6.x and derivates 
  (SL6.x, CentOS7.x, etc.), RHEL7.x and derivates
  and Ubuntu. uCernVM based images are also
  supported.
  For such image you also need to know the relevant EC2 (AMI) id
  (see <xref linkend="HowToFindAMIID"/>).
</para></listitem>


<listitem><para>
  You need to set a specific security group to be used for the master node.
  This security group must include the following rules:
</para>
<screen>
Direction    Ether Type    IP Protocol    Port Range         Remote IP Prefix
Egress       IPv4          Any            Any                0.0.0.0/0	
Egress       IPv6          Any            Any                ::/0	
Ingress      IPv4          ICMP           Any                0.0.0.0/0 	
Ingress      IPv4          TCP            22 (SSH)           0.0.0.0/0	
Ingress      IPv4          TCP            9618               0.0.0.0/0	
Ingress      IPv4          TCP            41000 - 42000      0.0.0.0/0
</screen>
<note><para>
  Instead of modifying the rules of an existing security group, we suggest to
  create a new security group named e.g. "master_security_group".
  Security groups are discussed in 
  <xref linkend="SecurityGroups"/>.
</para></note>

<para>
  The slave nodes will instead use the <literal>default</literal> security
  group of your project. This group must include the following rule: 
<screen>
Direction  Ether Type  IP Protocol  Port Range   Remote IP Prefix   Remote Security Group
Ingress    IPv4        Any          Any          -                 <literal>&lt;master_security_group&gt;</literal> 
</screen>
</para>
<para>where <literal>&lt;master_security_group&gt;</literal> is the name of the security group that was chosen for the master node.</para> 
	</listitem>

<listitem><para>
  You need to download the <ulink url="https://github.com/CloudPadovana/ECM.git">ECM</ulink> software.  As 
  explained in <xref linkend="ClusterConfiguration"/>,
  this will be used to create the batch cluster configuration:
<screen>
$ git clone https://github.com/CloudPadovana/ECM.git
</screen>
	</para></listitem>
	



</itemizedlist>

</para>

	
</section>

<section id="ClusterConfiguration">
<title>The cluster configuration</title>

<para>
  You must properly configure the ecm.conf file stored in the ECM directory (created
  when you downloaded via git the ECM software)
</para>
<screen>
$ cat ecm.conf                                                                  
FLAVOR_VMS=<literal>&lt;flavor_name&gt;</literal>                               
MAX_VMS=<literal>&lt;max_vms&gt;</literal>                                      
MIN_VMS=<literal>&lt;min_vms&gt;</literal>                                      
JOBS_PER_VM=<literal>&lt;jobs_per_vm&gt;</literal>                              
IDLE_TIME=<literal>&lt;idle_time&gt;</literal>                                  
KEY_NAME==<literal>&lt;ssh_key_name&gt;</literal>
</screen>

<para>
Where:
</para>

<itemizedlist>
        <listitem><para>
          <literal>&lt;FLAVOR_VMS&gt;</literal> is the name of the                                       
          flavor to be used for the slave nodes.                                                         
          Flavors have been discussed in <xref linkend="Flavors"/>.                                      
          Available flavors are listed in the dashboard when you try to                                  
          launch a VM.                                                                                    
		      </para></listitem>
 <listitem><para>
          <literal>&lt;MAX_VMS&gt;</literal> is the maximum number of                                    
          slave nodes that can be instantiated.                                                          
        </para></listitem>


	
	<listitem><para>
		<literal>&lt;MIN_VMS&gt;</literal> is the minimum number of slave nodes (never terminated, always available).
	</para></listitem>
	
	<listitem><para>
	  <literal>&lt;JOBS_PER_VM&gt;</literal> is the maximum number of
	  jobs that will be run in a single slave node.
		<important><para>
		You have to verify that the number of jobs per VM is compatible with the number of VCPUs of the selected flavor.
		</para></important>
	</para></listitem>

	
	
	<listitem><para>
	  <literal>&lt;IDLE_TIME&gt;</literal> is the time (in seconds) after
	  which inactive VMs will be killed.
        </para></listitem>

	<listitem><para>
	  <literal>&lt;KEY_NAME&gt;</literal> is the name (without the .pem extension) of ssh key
	  previously created (see <xref linkend="CreatingAKeypair"/>) to be injected in the batch cluster nodes.
        </para></listitem>






</itemizedlist>

<note><para>
The batch system will use each CPU as a separate job slot. So if you have a flavor with 4 VCPUs, and you submit 1 job, 
the master will create 1 slave and use 1 of the 4 available VCPUs.
If you submit 4 jobs, again the master will create 1 slave, and 
will use all the 4 VCPUs. Large flavors means less machines to be 
created but possibly a sub-optimal usage of resources.
</para></note>
</section>

<section id="LaunchTheCluster">
<title>Start the elastic cluster</title>
<para>
  
  To start the elastic cluster, you only need to instantiate the master node.
</para>
<para>
  When you create such master,
  you will need to specify some user-data to describe the cluster configuration.
  The ecm.py script will create such user-data file for you, using as input the ecm.conf file you previously 
  edited.
  (see <xref linkend="ClusterConfiguration"/>).
</para>

<para>
First of all you have to set the relevant EC2 credentials:
</para>
<screen>
$ source ec2rc.sh
</screen>
<para>
Then you must launch ecm.py file and follow the instructions. We will create a CentOS 6 cluster as an example.
</para>
<screen>
$ python ecm.py

Choose the Operating System (OS) you want 
to use for your master and worker nodes:

1: Fedora
2: Ubuntu
3: uCernVM
4: CentOS7
5: CentOS6

OS type => 5
</screen>
<important><para>
The same OS will be used to instantiate both master node and worker node(s).
</para></important>

<screen>
Select the image for your CentOS6 based master and your CentOS6 based WNs:
1: CentOS 6
2: Other image. [WARNING] You have to know the EC2-id of image

Image => 1

</screen>
<warning><para>
  If you choose "Other image" you have to manually insert the image id in EC2 format (see <xref linkend="HowToFindAMIID"/>).     
</para></warning>

<para>
  The script will now print something like:

  <screen>
Now you can use the master-centos6-2017-03-16-17.45.31 file to instantiate the master node of your elastiq cluster.
  </screen>
</para>




<para>
  Now you have to start the master node.
  As explained in <xref linkend="CreatingVMs"/>. go to 'Instances' and create
  a new instance with [Launch Instances].
		</para>
		<para>
		In the details select:
		</para>
		<para>
		[details]
		<itemizedlist>
			<listitem><para>Instance Name => whatever you like</para></listitem>
			<listitem><para>Flavor => whatever you like; can be different from the flavor chosen for the slave nodes</para></listitem>
			<listitem><para>Image name => The same image chosen for the slaves.</para></listitem>
		</itemizedlist>
		</para>
		<para>
		[Access and Security]
		<itemizedlist>
			<listitem><para>Key pair => The key-pair that will be used to log on the nodes of the batch cluster</para></listitem>
			<listitem><para>Security Group => the security group for the master (choose only this one)</para></listitem>
		</itemizedlist>
		</para>
		<para>
		[post creation]
		<itemizedlist>
			<listitem><para>Customization Script Source => Select "File" from the dropdown menu and use "Choose File" to upload the user_data_file created by the ecm.py script </para></listitem>
		</itemizedlist>
		</para>
		<para>
		Then press launch.
		</para>



		
<para>
  Once you requested the creation of the master node, after some minutes, you will see that the master virtual machine and some 
(depending on the "MIN_VMS" attribute you defined in the ecm.conf) slave nodes are created.
</para>
<para>
  Get the IP address of master, and log in on this machine using the key you have imported/created before i.e:
<screen>
$ ssh -i ~/.ssh/id_rsa root@10.64.YY.XXX
</screen>
</para>

<para>
  For security reasons, as root you can not submit jobs to the HTCondor cluster. So make sure that a 'normal' account exists in the master
  node. In case you can create it using the command:

  <screen>
# adduser <literal>&lt;username&gt;</literal>
</screen>
Create a password for this account:
<screen>
# passwd <literal>&lt;username&gt;</literal>
</screen>

</para>

<para>
  You have to import any external disk, create homes, etc, as you would do in a normal machine.
</para>
</section>


<section id="HowSlaveNodesAreConfigured">
<title>How slave nodes are installed and configured</title>

<para>                                                                                                   
The instantiation of slaves nodes is managed by the elastiq service running in the master node.           
</para>

<para>                                                                                                   
The min and max number of nodes is set by user in the ecm.conf: the total number of active nodes will 
change dynamically with jobs need.                                                                         
</para>

<para>                                                                                                   
The installation of condor and its configuration on slaves is automatically provided by ECM. Inside 
the user_data_file created by the ecm.py script there is the parameter SLAVE_USERDATA whose value is 
the script for the installation and configuration of the slave, coded in b64.                                   
The original uncoded script used for condor installation and configuration on slaves is stored in the 
ECM/slave_files directory. There is a file for each Operating system, depending on the system 
selected for the master.                                                                                             
These files provide the basic configuration for condor, to support both the Vanilla and Docker 
universes.                                                                                                        
</para>

<para>                                                                                                   
Generally the user doesn't need to modify these files. If, for some reasons, you need to modify the 
condor configuration or you need to install additional packages on                                           
the slaves, this script can be modified: ECM will take care to code it in b64 and add the new value to 
the SLAVE_USERDATA parameter in the                                                                       
user_data_file.                                                                                          
</para>
</section>



<section id="UseTheCluster">
<title>Use the elastic cluster</title>


<para>
  Log to the master node using your unpriviledged account.

Check if condor is running with the command:
<screen>
$ condor_q
-- Schedd: 10-64-20-181.virtual-analysis-facility : &lt;10.64.20.181:41742&gt;
 ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD

0 jobs; 0 completed, 0 removed, 0 idle, 0 running, 0 held, 0 suspended
</screen>

Check the status of the cluster:

<screen>
$ condor_status
Name               OpSys      Arch   State     Activity LoadAv Mem   ActvtyTime

slot1@10-64-22-84. LINUX      X86_64 Unclaimed Idle      0.000 1977  2+12:44:58
slot2@10-64-22-84. LINUX      X86_64 Unclaimed Idle      0.000 1977  2+12:45:25
                     Total Owner Claimed Unclaimed Matched Preempting Backfill

        X86_64/LINUX     2     0       0         2       0          0        0

               Total     2     0       0         2       0          0        0
</screen>
</para>


<para>
Create you HTCondor 'job file'. A simple example is the following:
</para>
<screen>
$ cat test.classad

Universe = vanilla
Executable = /home/&lt;username&gt;/test.sh
Log = test.log.$(Cluster)$(Process)
Output = test.out.$(Cluster)$(Process)
Error = test.err.$(Cluster)$(Process)
Queue &lt;number_of_jobs_to_submit&gt;
</screen>

<para>
where <literal>test.sh</literal> is the executable you want to run.

</para>
<para>
Submit your jobs issuing the command:
<screen>
$ condor_submit test.classad
</screen>
and check their status with: 
<screen>
$ condor_q
</screen>

You can find documentation about HTCondor <ulink url="http://research.cs.wisc.edu/htcondor/manual/">here</ulink>.

</para>
</section>


<section id="RunningContainers">
<title>Use the elastic cluster to run docker containers</title>

<para>                                                                                                   
The HTCondor elastic cluster can also be used to run docker containers.                                  
You don't need to install docker on your images: this is done by ECM.                                    
</para>

<para>                                                                                                   
Once the cluster is created, check if Docker is enabled on the slaves:

<screen>                                                                                                 
# condor_status -l | grep -i Docker                                                                      
StarterAbilityList = "HasTDP,HasEncryptExecuteDirectory,HasFileTransferPluginMethods,HasJobDeferral,HasJICLocalConfig,HasJICLocalStdin,HasPerFileEncryption,HasDocker,HasFileTransfer,HasReconnect,HasVM,HasMPI,HasRemoteSyscalls,HasCheckpointing"                                                                      
DockerVersion = "Docker version 1.7.1, build 786b29d/1.7.1"                                              
HasDocker = true                                                                                         
StarterAbilityList = "HasTDP,HasEncryptExecuteDirectory,HasFileTransferPluginMethods,HasJobDeferral,HasJICLocalConfig,HasJICLocalStdin,HasPerFileEncryption,HasDocker,HasFileTransfer,HasReconnect,HasVM,HasMPI,HasRemoteSyscalls,HasCheckpointing"                                                                      
DockerVersion = "Docker version 1.7.1, build 786b29d/1.7.1"                                              
HasDocker = true                                                                                         
</screen>
</para>


<para>                                                                                                   
The following is a simple example which runs a docker container, which is downloaded from docker-hub:    

<screen>    
$ cat test-docker.classad                                                                                
                                                                                                         
universe = docker                                                                                        
docker_image = debian                                                                                    
executable = /bin/cat                                                                                    
arguments = /etc/hosts                                                                                   
should_transfer_files = YES                                                                              
when_to_transfer_output = ON_EXIT                                                                        
Log = test-docker.log.$(Cluster).$(Process)                                                              
Output = test-docker.out.$(Cluster).$(Process)                                                           
Error = test-docker.err.$(Cluster).$(Process)                                                            
request_memory = 100M                                                                                    
Queue &lt;number_of_jobs_to_submit&gt;
</screen>
</para>

</section>


<section id="HowToFindAMIID">
<title>How to find the EC2 (AMI) id of an image</title>
<para>
  As explained above, to use the Elastic batch cluster you need to
  know the EC2 (AMI) id of the image you want to use.
</para>
<para>
  First of all you need to install the euca2ools and to download the EC2
  credentials for your project, as explained in
  <xref linkend="AccessingtheCloudthroughEC2"/>.
</para>

<para>
  Uncompress (unzip) the EC2 zip file, and source the ec2rc.sh script to set
  the correct environment:
  
<screen>
$ source ec2rc.sh
</screen>
</para>
<para>
  To discover the EC2 id of your image or snapshot, use the
  'euca-describe-images' command:

<screen>
$ euca-describe-images -I ${EC2_ACCESS_KEY} -S ${EC2_SECRET_KEY} -U ${EC2_URL}

IMAGE   ami-0000031b    None (uCernVM 2.3-0)    beaeede3841b47efb6b665a1a667e5b1        available       public                  machine                         instance-store
IMAGE   ami-00000447    snapshot        36b1ddb5dab8404dbe7fc359ec95ecf5        available       public                  machine                         instance-store
</screen>
</para>



<para>
  In the example above:
<itemizedlist>
  <listitem><para>
  the EC2 image id of the uCernVM 2.3-0 image is ami-0000031b
  </para></listitem>
    
  <listitem><para>    
  there is a snapshot whose EC2 is is ami-00000447.
  </para></listitem>
</itemizedlist>  
</para>

<note><para>
In case you have snapshot on the output of the euca-describe-images you notice that you have no
name associated with the ami-id. To obtain a nicely formatted list of (ami-id, name) couples you
can use the following command:
<screen>
$ euca-describe-images --debug 2&gt;&amp;1 | grep 'imageId\|name' | sed 'N;s/\n/ /'

      &lt;imageId&gt;ami-00000002&lt;/imageId&gt;       &lt;name&gt;cirros&lt;/name&gt;
      &lt;imageId&gt;ami-0000000d&lt;/imageId&gt;       &lt;name&gt;Fedora 20 x86_64&lt;/name&gt;
      &lt;imageId&gt;ami-00000010&lt;/imageId&gt;       &lt;name&gt;Centos 6 x86_64&lt;/name&gt;
      &lt;imageId&gt;ami-00000013&lt;/imageId&gt;       &lt;name&gt;Centos 7 x86_64&lt;/name&gt;
      &lt;imageId&gt;ami-0000001b&lt;/imageId&gt;       &lt;name&gt;ubuntu-14.04.3-LTSx86_64&lt;/name&gt;
      &lt;imageId&gt;ami-0000005d&lt;/imageId&gt;       &lt;name&gt;matlab-2015a-glnxa64&lt;/name&gt;
      &lt;imageId&gt;ami-00000057&lt;/imageId&gt;       &lt;name&gt;Win7-Pro-X86_64-ENU&lt;/name&gt;
      &lt;imageId&gt;ami-00000027&lt;/imageId&gt;       &lt;name&gt;Fedora 23 x86_64&lt;/name&gt;
      &lt;imageId&gt;ami-00000069&lt;/imageId&gt;       &lt;name&gt;Win7-Photoscan&lt;/name&gt;
      &lt;imageId&gt;ami-0000002d&lt;/imageId&gt;       &lt;name&gt;photo-slave&lt;/name&gt;
      &lt;imageId&gt;ami-0000004e&lt;/imageId&gt;       &lt;name&gt;s-medium-snap&lt;/name&gt;
      &lt;imageId&gt;ami-0000005a&lt;/imageId&gt;       &lt;name&gt;uCernVM 3.6.5&lt;/name&gt;
      &lt;imageId&gt;ami-000000ae&lt;/imageId&gt;       &lt;name&gt;archlinux&lt;/name&gt;
      &lt;imageId&gt;ami-000000c6&lt;/imageId&gt;       &lt;name&gt;ubuntu-16.04.1-LTS x86_64&lt;/name&gt;
      &lt;imageId&gt;ami-000000c9&lt;/imageId&gt;       &lt;name&gt;Fedora 25 x86_64&lt;/name&gt;
      &lt;imageId&gt;ami-000000d2&lt;/imageId&gt;       &lt;name&gt;x2go-thinclient-server&lt;/name&gt;
      &lt;imageId&gt;ami-000000d5&lt;/imageId&gt;       &lt;name&gt;Win7-test&lt;/name&gt;
      &lt;imageId&gt;ami-000000db&lt;/imageId&gt;       &lt;name&gt;matlab-2016b&lt;/name&gt;
      &lt;imageId&gt;ami-000000d8&lt;/imageId&gt;       &lt;name&gt;ubuntu-16.04.1+Matlab_2016b&lt;/name&gt;
...
      Note that items may appear multiple times...
...
</screen>
</para></note>

<para>
  You can also see all the information of an image, e.g.:
  
<screen>
$ euca-describe-images --debug ami-00000447 
</screen>

or:
<screen>
$ euca-describe-images -I ${EC2_ACCESS_KEY} -S ${EC2_SECRET_KEY} -U ${EC2_URL} --debug ami-00000447 
</screen>

The returned output will be something like:

<screen>
  &lt;requestId&gt;req-c56c3694-c555-464a-b21d-2c86ccc020be&lt;/requestId&gt;
  &lt;imagesSet&gt;
    &lt;item&gt;
      &lt;description/&gt;
      &lt;imageOwnerId&gt;36b1ddb5dab8404dbe7fc359ec95ecf5&lt;/imageOwnerId&gt;
      &lt;isPublic&gt;true&lt;/isPublic&gt;
      &lt;imageId&gt;ami-00000447&lt;/imageId&gt;
      &lt;imageState&gt;available&lt;/imageState&gt;
      &lt;architecture/&gt;
      &lt;imageLocation&gt;snapshot/imageLocation&gt;
      &lt;rootDeviceType&gt;instance-store&lt;/rootDeviceType&gt;
      &lt;rootDeviceName&gt;/dev/sda1&lt;/rootDeviceName&gt;
      &lt;imageType&gt;machine&lt;/imageType&gt;
      &lt;name&gt;cernvm_230_ldap_pd&lt;/name&gt;
    &lt;/item&gt;
  &lt;/imagesSet&gt;
&lt;/DescribeImagesResponse&gt;
</screen>

</para>

</section>



<section id="Restart_the_elastic_cluster">
  <title>Restart the elastic cluster</title>
  <para>
   This section describes the steps to be followed to restart the elastic cluster
   (this might be needed e.g. after a reboot).
  </para>

<para>
    <itemizedlist>
      <listitem><para>
	If possible, delete all the slave nodes via <ulink url="https://cloud-areapd.pd.infn.it/dashboard">dashboard</ulink>;
      </para></listitem>
      
      <listitem><para>    
	Log on the master node as root;
      </para></listitem>
      
      <listitem><para>    
	Check if both condor and elastiq services are already running
	<screen>
# service condor status
# service elastiq status
	</screen>
	In this case new slaves will be created and will join the cluster in some minutes.
      </para></listitem>
      
      <listitem><para>    
	if only condor service is running but elastiq isn't, please restart elastiq using the following command:
	<screen>
# service elastiq start
	</screen>
	or
	<screen>
# elastiqctl restart
	</screen>
	and wait for the creation of new slaves that will connect to the cluster in some minutes;
      </para></listitem>
      
      <listitem><para>    
	If condor isn't running and some elastiq processes are up and running, kill them:
	<screen>
# ps -ef | grep elastiq
# kill -9 &lt;n_proc&gt;
	</screen>
	and start the condor service using the following command:
	<screen>
# service condor start
	</screen>
	Now the condor_q command should return
	<screen>
<literal># condor_q  </literal>
-- Schedd:  : &lt;10.64.xx.yyy:zzzzz&gt;
 ID      OWNER            SUBMITTED     RUN_TIME ST PRI SIZE CMD               
 0 jobs; 0 completed, 0 removed, 0 idle, 0 running, 0 held, 0 suspended
	</screen>
	and the condor_status command output should be empty (no nodes running) 
	<screen>
<literal># condor_status</literal>

	</screen>
	Then start the elastiq service
	<screen>
# service elastiq start
	</screen>
	In some minutes the minimum number of nodes should connect to the condor cluster and the condor_status command output should show them e.g.:
	<screen>
<literal># condor_status</literal>
Name               OpSys      Arch   State     Activity LoadAv Mem   ActvtyTime
slot1@10-64-22-215 LINUX      X86_64 Unclaimed Idle      0.000 1896  0+00:24:46
slot2@10-64-22-215 LINUX      X86_64 Unclaimed Idle      0.000 1896  0+00:25:05
slot1@10-64-22-217 LINUX      X86_64 Unclaimed Idle      0.000 1896  0+00:24:44
slot2@10-64-22-217 LINUX      X86_64 Unclaimed Idle      0.000 1896  0+00:25:05
slot1@10-64-22-89. LINUX      X86_64 Unclaimed Benchmar  1.000 1896  0+00:00:04
slot2@10-64-22-89. LINUX      X86_64 Unclaimed Idle      0.040 1896  0+00:00:05
                     Machines Owner Claimed Unclaimed Matched Preempting
        X86_64/LINUX        6     0       0         6       0          0
               Total        6     0       0         6       0          0
	</screen>
      </para></listitem>
    </itemizedlist>  
  </para>

</section>


<section id="Troubleshooting_the_elastic_cluster">
  <title>Troubleshooting the elastic cluster</title>



  <para>
    <literal>Check the log files</literal>
  </para>
  <para>
    The elastiq log file is /var/log/elastiq/elastiq.log. It is not straightforward to interpret it without knowing its structure. When you start the elastiq service the first part of log file reports the check of cloud user's credentials and of other parameters configured in the elastiq.conf file (i.e. the userdata file for slave nodes) 
  </para>
  <screen>
INFO [__init__.conf] Configuration: ec2.image_id = ami-9f3da3fc (from file)
INFO [__init__.conf] Configuration: ec2.flavour = cldareapd.medium (from file)
INFO [__init__.conf] Configuration: ec2.api_url = https://cloud-areapd.pd.infn.it:8788/services/Cloud (from file)
2INFO [__init__.conf] Configuration: ec2.aws_secret_access_key = [...] (from file)
INFO [__init__.conf] Configuration: ec2.key_name = my_key (from file)
INFO [__init__.conf] Configuration: ec2.user_data_b64 = [...] (from file)
INFO [__init__.conf] Configuration: ec2.aws_access_key_id = [...] (from file)
 
INFO [__init__.conf] Configuration: quota.max_vms = 3.0 (from file)
INFO [__init__.conf] Configuration: quota.min_vms = 1.0 (from file)
NFO [__init__.main] Loaded batch plugin "htcondor"
DEBUG [htcondor.init] HTCondor plugin initialized
DEBUG [__init__.main] EC2 image "ami-9f3da3fc" found
  </screen>
  <para>
    if your credentials are wrong, you will see in the log file an error as:
  </para>
  <screen>
ERROR [__init__.ec2_running_instances] Can't get list of EC2 instances (maybe wrong credentials?)
  </screen>
  <para>
    If you specified a wrong ami_id for the image of slave nodes, the error message in the log will be:
  </para>
  <screen>
ERROR [__init__.main] Cannot find EC2 image "ami-00000000"
  </screen>
  <para>
    Elastiq periodically checks all the VMs. If a VM is correctly added to the condor cluster, it logs:
  </para>
  <screen>
DEBUG [__init__.ec2_running_instances] Found IP 10.64.22.188 corresponding to instance
  </screen>
  <para>
    otherwise something like:
  </para>
  <screen>
WARNING [__init__.ec2_running_instances] Cannot find instance 10.64.22.216 in the list of known IPs
WARNING [__init__.ec2_running_instances] Cannot find instance 10.64.22.182 in the list of known IPs
WARNING [__init__.ec2_running_instances] Cannot find instance 10.64.22.236 in the list of known IPs
  </screen>
  <para>
    When elastiq instantiates a new VM it logs something like:
  </para>
  <screen>
WARNING [__init__.ec2_scale_up] Quota enabled: requesting 1 (out of desired 1) VMs
INFO [__init__.ec2_scale_up] VM launched OK. Requested: 1/1 | Success: 1 | Failed: 0 | ID: i-f026f340
DEBUG [__init__.save_owned_instances] Saved list of owned instances: i-f026f340
  </screen>
  <para>
    and when elastiq deletes an idle VM it logs:
  </para>
  <screen>
INFO [__init__.check_vms] Host 10-64-22-190.INFN-PD is idle for more than 2400s: requesting shutdown
INFO [__init__.ec2_scale_down] Requesting shutdown of 1 VMs...
  </screen>
  <para>
    In the master node of condor, logs are located in /var/log/condor directory. You may refer to the HTCondor 
    documentation for more information on these log files.
  </para>
  <screen>
# ls -l /var/log/condor/
total 76
-rw-r--r--. 1 condor condor 24371 Jan 18 08:42 CollectorLog
-rw-r--r--. 1 root   root     652 Jan 18 08:35 KernelTuning.log
-rw-r--r--. 1 condor condor  2262 Jan 18 08:35 MasterLog
-rw-r--r--. 1 condor condor     0 Jan 18 08:35 MatchLog
-rw-r--r--. 1 condor condor 19126 Jan 18 08:42 NegotiatorLog
-rw-r--r--. 1 root   root   13869 Jan 18 08:42 ProcLog
-rw-r--r--. 1 condor condor   474 Jan 18 08:35 ScheddRestartReport
-rw-r--r--. 1 condor condor  2975 Jan 18 08:40 SchedLog
  </screen>
  <para>
    <literal>Check the running processes</literal>
  </para>
  <para>
    Processes expected to run are:
    <itemizedlist>
      <listitem><para>
	for the condor service:
	<screen>
<literal># ps -ef | grep condor</literal>
condor       764       1  0 14:09 ?        00:00:00 /usr/sbin/condor_master -f
root         960     764  0 14:09 ?        00:00:00 condor_procd -A /var/run/condor/procd_pipe -L /var/log/condor/ProcLog -R 1000000 -S 60 -C 996
condor       961     764  0 14:09 ?        00:00:00 condor_collector -f
condor       974     764  0 14:09 ?        00:00:00 condor_negotiator -f
condor       975     764  0 14:09 ?        00:00:00 condor_schedd -f	  
	</screen>
      </para></listitem>
      <listitem><para>
	for the elastiq service:
	<screen>
<literal># ps -ef | grep elastiq</literal>
elastiq      899       1  0 14:09 ?        00:00:00 SCREEN -dmS __|elastiq|__ /bin/sh -c python /usr/bin/elastiq-real.py --logdir=/var/log/elastiq --config=/etc/elastiq.conf --statefile=/var/lib/elastiq/state 2&gt; /var/log/elastiq/elastiq.err
elastiq      952     899  0 14:09 pts/0    00:00:00 /bin/sh -c python /usr/bin/elastiq-real.py --logdir=/var/log/elastiq --config=/etc/elastiq.conf --statefile=/var/lib/elastiq/state 2&gt; /var/log/elastiq/elastiq.err
elastiq      953     952  0 14:09 pts/0    00:00:01 python /usr/bin/elastiq-real.py --logdir=/var/log/elastiq --config=/etc/elastiq.conf --statefile=/var/lib/elastiq/state
	</screen>
      </para></listitem>
    </itemizedlist>
  </para>

  <warning><para>
    The condor_status information isn't updated very frequently. So it can happen that condor_status shows nodes that have been already removed from the cloud by elastiq.
  </para></warning>

</section>

</chapter>


